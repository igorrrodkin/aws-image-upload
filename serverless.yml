org: igorrrodkin
console: true
service: ihorUpload

frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs14.x
  environment:
    user_pool_id: { Ref: UserPool }
    client_id: { Ref: UserClient }
  iamRoleStatements:
    #   COGNITO
    # - Effect: "Allow"
    #   Action:
    #     - cognito-idp:AdminInitiateAuth
    #     - cognito-idp:AdminCreateUser
    #     - cognito-idp:AdminSetUserPassword
    #   Resource:
    #     - "*"
    #   S3 GET/PUT OBJECTS
    - Effect: "Allow"
      Action:
        - s3:*
        - "s3:GetObject"
        - "s3:PutObject"
      Resource:
        Fn::Join:
          - ""
          - - "arn:aws:s3:::"
            - "awsbucketpresigned"
            - "/*"
    #   S3 LIST BUCKET
    # - Effect: "Allow"
    #   Action:
    #     - "s3:ListBucket"
    #   Resource:
    #     Fn::Join:
    #       - ""
    #       - - "arn:aws:s3:::"
    #         - "awsbucketpresigned"
    #   DYNAMODB
    #####################################
    # - Effect: "Allow"
    #   Action:
    #     - "dynamodb:*"
    #     # - "dynamodb:Query"
    #     # - "dynamodb:GetItem"
    #     # - "dynamodb:DeleteItem"
    #     # - "dynamodb:Scan"
    #   Resource:
    #     - "*"
    #   - { "Fn::GetAtt": ["UsersTable2", "Arn"] }
#############################################
functions:
  # loginUser:
  #   handler: src/user/login.handler
  #   events:
  #     - http:
  #         path: user/login
  #         method: post
  #         cors: true

  # signupUser:
  #   handler: src/user/signup.handler
  #   events:
  #     - http:
  #         path: user/signup
  #         method: post
  #         cors: true

  putImage:
    handler: src/handlers.putImage
    events:
      - http:
          path: /putimage
          method: put
          cors: true
          # authorizer:
          #   name: PrivateAuthorizer
          #   type: COGNITO_USER_POOLS
          #   arn:
          #     Fn::GetAtt:
          #       - UserPool
          #       - Arn
          #   claims:
          #     - email

  # deleteImage:
  #   handler: src/handlers.deleteImage
  #   events:
  #     - http:
  #         path: /deleteimage
  #         method: get
  #         cors: true
  #         authorizer:
  #           name: PrivateAuthorizer
  #           type: COGNITO_USER_POOLS
  #           arn:
  #             Fn::GetAtt:
  #               - UserPool
  #               - Arn
  #           claims:
  #             - email

  # listImages:
  #   handler: src/handlers.listImages
  #   events:
  #     - http:
  #         path: /listimages
  #         method: get
  #         cors: true
  #         authorizer:
  #           name: PrivateAuthorizer
  #           type: COGNITO_USER_POOLS
  #           arn:
  #             Fn::GetAtt:
  #               - UserPool
  #               - Arn
  #           claims:
  #             - email
resources:
  Resources:
    # UserPool:
    #   Type: AWS::Cognito::UserPool
    #   Properties:
    #     UserPoolName: sls-image-task
    #     Schema:
    #       - Name: email
    #         Required: true
    #         Mutable: true
    #     Policies:
    #       PasswordPolicy:
    #         MinimumLength: 8
    #     AutoVerifiedAttributes: ["email"]

    # UserClient:
    #   Type: AWS::Cognito::UserPoolClient
    #   Properties:
    #     ClientName: user-pool-ui
    #     GenerateSecret: false
    #     UserPoolId: { Ref: UserPool }
    #     AccessTokenValidity: 5
    #     IdTokenValidity: 5
    #     ExplicitAuthFlows:
    #       - "ADMIN_NO_SRP_AUTH"

    # UsersTable2:
    # Type: AWS::DynamoDB::Table
    # Properties:
    #   TableName: UsersTable2
    #   ProvisionedThroughput:
    #     ReadCapacityUnits: 1
    #     WriteCapacityUnits: 1
    #   AttributeDefinitions:
    #     - AttributeName: email
    #       AttributeType: S
    #   KeySchema:
    #     - AttributeName: email
    #       KeyType: HASH
plugins:
  - serverless-plugin-typescript
